{"version":3,"sources":["context/AppReducer.tsx","context/GlobalState.tsx","components/AddressBar.tsx","components/Settings.tsx","components/Wallet.tsx","components/Gallery.tsx","components/Tezori3.tsx","index.tsx"],"names":["ActionTypes","reducer","state","action","type","UpdateAddress","address","newAddress","initialContext","derivationPath","network","tezosServer","apiKey","children","GlobalContext","createContext","globalState","dispatch","GlobalProvider","useReducer","AppReducer","Provider","value","AddressBar","useContext","useState","setAddress","ledgerInitialized","setLedgerInitalized","ledgerAppXtz","setLedgerAppXtz","getAddressFromLedger","a","TransportWebHID","create","transport","console","log","appXtz","Tezos","getAddress","id","onChange","e","currentTarget","onClick","handleAddressUpdateClick","Settings","defaultValue","initialState","publicKey","balance","delegate","balance_usdtz","Wallet","walletState","setWalletState","useEffect","fetchAccountInfo","TezosNodeReader","getAccountForBlock","account","w","then","r","Gallery","Tezori3","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.484995c5.chunk.js","sourcesContent":["import {IAppContext} from \"./GlobalState\";\n\nexport type Action = {\n    type: ActionTypes,\n    newAddress: string\n}\n\nexport enum ActionTypes {\n    UpdateAddress\n}\n\nfunction reducer(state: IAppContext, action: Action): IAppContext {\n    switch(action.type) {\n        case ActionTypes.UpdateAddress:\n            return {\n                ...state,\n                address: action.newAddress\n            }\n        default:\n            return state;\n    }\n}\n\nexport default reducer;","import {createContext, useReducer, ReactElement} from 'react';\nimport AppReducer from './AppReducer';\n\nexport type IAppContext = {\n    address: string;\n    derivationPath: string;\n    network: string;\n    tezosServer: string;\n    apiKey: string;\n    children: ReactElement | null;\n}\n\nconst initialContext: IAppContext = {\n    address: \"tz1aWXP237BLwNHJcCD4b3DutCevhqq2T1Z9\",\n    derivationPath: \"44'/1729'/0'/0'/1'\",\n    network: \"ithacanet\",\n    tezosServer: \"https://tezos-ithaca.cryptonomic-infra.tech:443\",\n    apiKey: \"ab682065-864a-4f11-bc77-0ef4e9493fa1\",\n    children: null\n}\n\nexport const GlobalContext = createContext<{\n    globalState: IAppContext;\n    dispatch: React.Dispatch<any>;\n    }>({\n        globalState: initialContext,\n        dispatch: () => null\n    });\n\nexport const GlobalProvider: React.FC<IAppContext> = ({ children }) => {\n    const [state, dispatch] = useReducer(AppReducer, initialContext);\n\n    return (\n        <GlobalContext.Provider value={{globalState: state, dispatch}}>\n            {children}\n        </GlobalContext.Provider>\n    )\n}","import * as React from \"react\";\nimport {useContext, useState} from \"react\";\nimport {GlobalContext} from \"../context/GlobalState\";\nimport {Action, ActionTypes} from \"../context/AppReducer\";\nimport TransportWebHID from \"@ledgerhq/hw-transport-webhid\";\nimport Tezos from \"@ledgerhq/hw-app-tezos\";\n\nexport function AddressBar() {\n    const {globalState, dispatch } = useContext(GlobalContext);\n    const [address, setAddress] = useState(globalState.address);\n    const [ledgerInitialized, setLedgerInitalized] = useState(false);\n    const [ledgerAppXtz, setLedgerAppXtz] = useState<Tezos>();\n\n    const handleAddressUpdateClick = () => {\n        const action: Action = {\n            type: ActionTypes.UpdateAddress,\n            newAddress: address\n        }\n        dispatch(action);\n    }\n\n    const getAddressFromLedger = async () => {\n\n        if(!ledgerInitialized) {\n            const transport = await TransportWebHID.create()\n            console.log(\"transport\", transport)\n            const appXtz = new Tezos(transport)\n            console.log(\"appXtz\", appXtz)\n            setLedgerAppXtz(appXtz)\n            setLedgerInitalized(true)\n        }\n\n        if(ledgerAppXtz) {\n            const address = await ledgerAppXtz.getAddress(\"44'/1729'/0'/0'\")\n            console.log(\"address\", address)\n            setAddress(address.address)\n        }\n    }\n\n    return (\n        <div>\n            <input\n                id=\"address\"\n                value={address}\n                onChange={(e: React.FormEvent<HTMLInputElement>) => { setAddress(e.currentTarget.value)}\n            }\n            />\n            <button onClick={() => handleAddressUpdateClick()}>\n                    Update\n            </button>\n            <button onClick={() => getAddressFromLedger()}>Get from Ledger</button>\n        </div>\n    );\n}","import * as React from \"react\";\nimport {useContext} from \"react\";\nimport {GlobalContext} from \"../context/GlobalState\";\n\nexport function Settings() {\n    const {globalState } = useContext(GlobalContext);\n    return (\n        <div id={\"settings\"}>\n            <h1>Settings</h1>\n            <p>Tezos Node</p>\n            <input id={\"settings_tezosNode\"} defaultValue={globalState.tezosServer} />\n            <p>Nautilus API Key</p>\n            <input id={\"settings_apikey\"} defaultValue={globalState.apiKey} />\n            <p>Network</p>\n            <input id={\"settings_apikey\"} defaultValue={globalState.network} />\n        </div>\n    );\n}","import * as React from \"react\";\nimport * as TezosRPCTypes from \"conseiljs/dist/types/tezos/TezosRPCResponseTypes\";\nimport {TezosNodeReader} from \"conseiljs\";\nimport {useContext, useEffect, useState} from \"react\";\nimport {GlobalContext} from \"../context/GlobalState\";\n\ntype WalletState = {\n    publicKey: string,\n    balance: string,\n    delegate: string | undefined,\n    balance_usdtz: string\n}\n\nconst initialState: WalletState = {\n    publicKey: \"\",\n    balance: \"\",\n    delegate: \"\",\n    balance_usdtz: \"\"\n}\n\nexport function Wallet() {\n    const {globalState } = useContext(GlobalContext);\n    const [walletState, setWalletState] = useState(initialState);\n\n    useEffect(() => {\n\n        const fetchAccountInfo = async () => {\n            const account: TezosRPCTypes.Contract = await TezosNodeReader.getAccountForBlock(\n                globalState.tezosServer,\n                \"head\",\n                globalState.address);\n            setWalletState( (w) => (\n                {\n                    ...w,\n                    balance: account.balance,\n                    delegate: account.delegate\n                }\n                )\n            )\n        }\n\n        fetchAccountInfo().then(r => r);\n    }, [globalState]);\n\n    return (\n            <div>\n                <h1>Wallet</h1>\n                <p>Delegate: {walletState.delegate}</p>\n                <p>XTZ Balance: {walletState.balance}</p>\n                <p>USDtz Balance: N/A</p>\n            </div>\n    );\n}","import * as React from \"react\";\nimport {useContext} from \"react\";\nimport {GlobalContext} from \"../context/GlobalState\";\n\nexport function Gallery() {\n    const {globalState } = useContext(GlobalContext);\n    return (\n        <div>\n            <h1>Gallery</h1>\n            <p>{globalState.address}</p>\n        </div>\n    );\n}","import * as React from \"react\";\nimport '../styles/default.css';\nimport {AddressBar} from \"./AddressBar\";\nimport {Settings} from \"./Settings\";\nimport {Wallet} from \"./Wallet\";\nimport {Gallery} from \"./Gallery\";\n\nexport function Tezori3() {\n    return (\n        <div>\n            <AddressBar />\n            <div>\n                <Wallet />\n                <Gallery/>\n                <Settings />\n            </div>\n        </div>\n    )\n}","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './styles/default.css';\nimport {Tezori3} from \"./components/Tezori3\";\nimport { GlobalProvider } from './context/GlobalState';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n      <GlobalProvider address={\"\"} apiKey={\"\"} derivationPath={\"\"} network={\"\"} tezosServer={\"\"}>\n        <Tezori3 />\n      </GlobalProvider>\n  </React.StrictMode>\n);\n\n"],"sourceRoot":""}